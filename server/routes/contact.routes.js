import { Router } from "express";
import {
    addContact,
    deleteContact,
    getContacts,
    updateContact,
} from "../controllers/contact.controller.js";
import { requireAuth } from "../middleware/requireAuth.middleware.js";

const router = Router();

/**
 * @swagger
 * tags:
 *   name: Contacts
 *   description: CRUD for managing contacts (requires authentication)
 */

/**
 * @swagger
 * components:
 *   securitySchemes:
 *     bearerAuth:
 *       type: http
 *       scheme: bearer
 *       bearerFormat: JWT
 *
 *   schemas:
 *     Contact:
 *       type: object
 *       required:
 *         - firstName
 *         - lastName
 *         - phone
 *       properties:
 *         _id:
 *           type: string
 *           readOnly: true
 *           description: Unique identifier automatically generated by MongoDB
 *           example: 67027a81b57dcbf7298a0f88
 *         user:
 *           type: string
 *           readOnly: true
 *           description: The ID of the user who owns this contact
 *           example: 67112a92b8d1234abc987def
 *         firstName:
 *           type: string
 *           description: The contact's first name
 *           example: John
 *         lastName:
 *           type: string
 *           description: The contact's last name
 *           example: Doe
 *         phone:
 *           type: string
 *           description: The contact's phone number (unique per user, 10â€“20 chars)
 *           example: "0612345678"
 *         createdAt:
 *           type: string
 *           format: date-time
 *           description: Timestamp when the contact was created
 *           example: "2025-10-06T08:30:00.000Z"
 *         updatedAt:
 *           type: string
 *           format: date-time
 *           description: Timestamp when the contact was last updated
 *           example: "2025-10-06T09:00:00.000Z"
 */

/**
 * @swagger
 * /api/getContacts:
 *   get:
 *     summary: Get all contacts for the authenticated user
 *     tags: [Contacts]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: List of all contacts belonging to the authenticated user
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/Contact'
 *       404:
 *         description: No contacts found or database error
 */

/**
 * @swagger
 * /api/addContact:
 *   post:
 *     summary: Add a new contact for the authenticated user
 *     tags: [Contacts]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - firstName
 *               - lastName
 *               - phone
 *             properties:
 *               firstName:
 *                 type: string
 *                 example: Alice
 *               lastName:
 *                 type: string
 *                 example: Martin
 *               phone:
 *                 type: string
 *                 example: "0744556677"
 *     responses:
 *       201:
 *         description: Contact created successfully
 *       400:
 *         description: Contact already exists or invalid phone number
 */

/**
 * @swagger
 * /api/updateContact/{id}:
 *   patch:
 *     summary: Update an existing contact belonging to the authenticated user
 *     tags: [Contacts]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - name: id
 *         in: path
 *         description: The ID of the contact to update
 *         required: true
 *         schema:
 *           type: string
 *           example: 67027a81b57dcbf7298a0f88
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               firstName:
 *                 type: string
 *                 example: Alice
 *               lastName:
 *                 type: string
 *                 example: Martin
 *               phone:
 *                 type: string
 *                 example: "0744556677"
 *     responses:
 *       200:
 *         description: Contact updated successfully
 *       400:
 *         description: Phone number already in use
 *       404:
 *         description: Contact not found
 *       500:
 *         description: Server error while updating contact
 */

/**
 * @swagger
 * /api/deleteContact/{id}:
 *   delete:
 *     summary: Delete a contact belonging to the authenticated user
 *     tags: [Contacts]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - name: id
 *         in: path
 *         description: The ID of the contact to delete
 *         required: true
 *         schema:
 *           type: string
 *           example: 67027a81b57dcbf7298a0f88
 *     responses:
 *       200:
 *         description: Contact deleted successfully
 *       404:
 *         description: Contact not found
 *       500:
 *         description: Error deleting contact
 */

router.use(requireAuth);

router.get("/getContacts", getContacts);
router.post("/addContact", addContact);
router.patch("/updateContact/:id", updateContact);
router.delete("/deleteContact/:id", deleteContact);

export default router;
